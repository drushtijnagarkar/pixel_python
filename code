#include <FastLED.h>

#define LED_PIN     5
#define NUM_LEDS    1023
#define WIDTH       33
#define HEIGHT      31
#define COLOR_ORDER GRB
#define LED_TYPE    WS2812B
#define BRIGHTNESS  128

#define BTN_UP     35
#define BTN_DOWN   32
#define BTN_LEFT   33
#define BTN_RIGHT  25

CRGB leds[NUM_LEDS];

struct Point {
  int x, y;
};

Point snake[1023];
int snakeLength = 8;

Point foods[4];

int dirX = 1, dirY = 0;
int nextDirX = 1, nextDirY = 0;

unsigned long lastMove = 0;
unsigned int moveDelay = 150;

bool growing = false;
int growProgress = 0;
unsigned long growthTimer = 0;

unsigned long lastFoodEatenTime = 0;
const unsigned long foodTimeout = 25000;

const byte goEmoji[7][14] = {
  {0,1,1,1,1,0,0,  0,1,1,1,1,0,0},
  {1,0,0,0,0,1,0,  1,0,0,0,0,1,0},
  {1,0,0,0,0,0,0,  1,0,0,0,0,1,0},
  {1,0,0,1,1,1,0,  1,0,0,0,0,1,0},
  {1,0,0,0,0,1,0,  1,0,0,0,0,1,0},
  {1,0,0,0,0,1,0,  1,0,0,0,0,1,0},
  {0,1,1,1,1,0,0,  0,1,1,1,1,0,0}
};

void setup() {
  Serial.begin(115200);
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setBrightness(BRIGHTNESS);

  pinMode(BTN_UP, INPUT_PULLUP);
  pinMode(BTN_DOWN, INPUT_PULLUP);
  pinMode(BTN_LEFT, INPUT_PULLUP);
  pinMode(BTN_RIGHT, INPUT_PULLUP);

  randomSeed(analogRead(A0));

  flashStartAnimation();

  resetGame(); // Start game setup
}

void loop() {
  if (growing) {
    if (millis() - growthTimer > 60) {
      growthTimer = millis();
      growProgress++;
      if (growProgress >= snakeLength) {
        growing = false;
        growProgress = 0;
        if (snakeLength < 1023) {
          snake[snakeLength] = snake[snakeLength - 1];
          snakeLength++;
        }
      }
      drawMatrix();
    }
    return;
  }

  if (millis() - lastMove > moveDelay) {
    lastMove = millis();

    readButtons();
    dirX = nextDirX;
    dirY = nextDirY;

    moveSnake();
    drawMatrix();

    if (millis() - lastFoodEatenTime > foodTimeout) {
      Serial.println("TIMEOUT! No food eaten.");
      flashTimeout();
      resetGame();
    }
  }
}

void readButtons() {
  static unsigned long lastDebounceTime = 0;
  static const unsigned long debounceDelay = 5;

  static bool lastUp = HIGH, lastDown = HIGH, lastLeft = HIGH, lastRight = HIGH;

  bool readingUp = digitalRead(BTN_UP);
  bool readingDown = digitalRead(BTN_DOWN);
  bool readingLeft = digitalRead(BTN_LEFT);
  bool readingRight = digitalRead(BTN_RIGHT);

  if (millis() - lastDebounceTime > debounceDelay) {
    if (readingLeft == HIGH && lastLeft == LOW && dirX != 1) {
      nextDirX = -1; nextDirY = 0;
      lastDebounceTime = millis();
    } else if (readingRight == LOW && lastRight == HIGH && dirX != -1) {
      nextDirX = 1; nextDirY = 0;
      lastDebounceTime = millis();
    } else if (readingUp == LOW && lastUp == HIGH && dirY != 1) {
      nextDirX = 0; nextDirY = -1;
      lastDebounceTime = millis();
    } else if (readingDown == LOW && lastDown == HIGH && dirY != -1) {
      nextDirX = 0; nextDirY = 1;
      lastDebounceTime = millis();
    }
  }

  lastUp = readingUp;
  lastDown = readingDown;
  lastLeft = readingLeft;
  lastRight = readingRight;
}

void spawnFoods() {
  for (int i = 0; i < 4; i++) {
    bool valid;
    do {
      valid = true;
      foods[i].x = random(WIDTH);
      foods[i].y = random(HEIGHT);

      for (int j = 0; j < snakeLength; j++) {
        if (snake[j].x == foods[i].x && snake[j].y == foods[i].y) {
          valid = false;
          break;
        }
      }

      for (int k = 0; k < i && valid; k++) {
        if (foods[k].x == foods[i].x && foods[k].y == foods[i].y) {
          valid = false;
          break;
        }
      }
    } while (!valid);
  }
}

void moveSnake() {
  Point newHead = { snake[0].x + dirX, snake[0].y + dirY };

  if (newHead.x < 0) newHead.x = WIDTH - 1;
  else if (newHead.x >= WIDTH) newHead.x = 0;
  if (newHead.y < 0) newHead.y = HEIGHT - 1;
  else if (newHead.y >= HEIGHT) newHead.y = 0;

  for (int i = 0; i < snakeLength; i++) {
    if (snake[i].x == newHead.x && snake[i].y == newHead.y) {
      flashGameOver();
      resetGame();
      return;
    }
  }

  for (int i = snakeLength; i > 0; i--) {
    snake[i] = snake[i - 1];
  }
  snake[0] = newHead;

  for (int i = 0; i < 4; i++) {
    if (newHead.x == foods[i].x && newHead.y == foods[i].y) {
      spawnFoods();
      flashSnakeOrange();
      growing = true;
      growProgress = 0;
      growthTimer = millis();
      lastFoodEatenTime = millis();  // Reset food timeout timer
      break;
    }
  }
}

void drawMatrix() {
  FastLED.clear();

  for (int i = 0; i < snakeLength; i++) {
    int index = XY(snake[i].x, snake[i].y);
    if (index >= 0 && index < NUM_LEDS) {
      if (i == 0) leds[index] = CRGB::Blue;
      else if (growing && i == growProgress) leds[index] = CRGB(255, 100, 0);
      else leds[index] = CRGB::Green;
    }
  }

  for (int i = 0; i < 4; i++) {
    int foodIndex = XY(foods[i].x, foods[i].y);
    if (foodIndex >= 0 && foodIndex < NUM_LEDS) {
      leds[foodIndex] = CRGB::Red;
    }
  }

  FastLED.show();
}

int XY(int x, int y) {
  if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) return -1;
  return (y % 2 == 0) ? y * WIDTH + x : y * WIDTH + (WIDTH - 1 - x);
}

void resetGame() {
  snakeLength = 3;
  snake[0] = { WIDTH / 2, HEIGHT / 2 };
  snake[1] = { WIDTH / 2 - 1, HEIGHT / 2 };
  snake[2] = { WIDTH / 2 - 2, HEIGHT / 2 };
  dirX = 1; dirY = 0;
  nextDirX = 1; nextDirY = 0;
  spawnFoods();
  growing = false;
  growProgress = 0;
  lastFoodEatenTime = millis();
  flashStartAnimation();
}

void flashSnakeOrange() {
  FastLED.clear();
  for (int i = 0; i < snakeLength; i++) {
    int index = XY(snake[i].x, snake[i].y);
    if (index >= 0 && index < NUM_LEDS) leds[index] = CRGB(255, 100, 0);
  }
  FastLED.show();
  delay(300);
}

void flashGameOver() {
  for (int i = 0; i < 3; i++) {
    FastLED.clear();
    for (int j = 0; j < snakeLength; j++) {
      int index = XY(snake[j].x, snake[j].y);
      if (index >= 0 && index < NUM_LEDS) leds[index] = CRGB::Red;
    }
    FastLED.show();
    delay(200);
    FastLED.clear();
    FastLED.show();
    delay(150);
  }
}

void flashTimeout() {
  for (int i = 0; i < 2; i++) {
    FastLED.clear();
    fill_solid(leds, NUM_LEDS, CRGB::Red);
    FastLED.show();
    delay(300);
    FastLED.clear();
    FastLED.show();
    delay(200);
  }
}

void displayEmoji(const byte emoji[7][14], CRGB color) {
  FastLED.clear();
  int offsetX = (WIDTH - 14) / 2;
  int offsetY = (HEIGHT - 7) / 2;
  for (int y = 0; y < 7; y++) {
    for (int x = 0; x < 14; x++) {
      if (emoji[y][x]) {
        int index = XY(offsetX + x, offsetY + y);
        if (index >= 0 && index < NUM_LEDS) leds[index] = color;
      }
    }
  }
  FastLED.show();
  delay(1000);
}

void flashStartAnimation() {
  for (int i = 0; i < 3; i++) {
    FastLED.clear();
    displayEmoji(goEmoji, CRGB(255, 100, 0));
    delay(300);
    FastLED.clear();
    FastLED.show();
    delay(200);
  }
}
